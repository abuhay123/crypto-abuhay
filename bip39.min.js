!function(f){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=f();else if("function"==typeof define&&define.amd)define([],f);else{("undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this).bip39=f()}}(function(){return function r(n,o,u){function e(t,f){if(!o[t]){if(!n[t]){var e="function"==typeof require&&require;if(!f&&e)return e(t,!0);if(i)return i(t,!0);var r=new Error("Cannot find module '"+t+"'");throw r.code="MODULE_NOT_FOUND",r}var a=o[t]={exports:{}};n[t][0].call(a.exports,function(f){return e(n[t][1][f]||f)},a,a.exports,r,n,o,u)}return o[t].exports}for(var i="function"==typeof require&&require,f=0;f<u.length;f++)e(u[f]);return e}({1:[function(require,module,exports){
'use strict'
const entropyToMnemonic = require('./entropyToMnemonic')
const generateMnemonic = require('./generateMnemonic')
const mnemonicToEntropy = require('./mnemonicToEntropy')
const mnemonicToSeed = require('./mnemonicToSeed')
const validateMnemonic = require('./validateMnemonic')

module.exports = {
  entropyToMnemonic,
  generateMnemonic,
  mnemonicToEntropy,
  mnemonicToSeed,
  validateMnemonic
}
},{"./entropyToMnemonic":2,"./generateMnemonic":3,"./mnemonicToEntropy":4,"./mnemonicToSeed":5,"./validateMnemonic":6}],2:[function(require,module,exports){
'use strict'
const wordlist = require('./wordlists/english.json')
const binaryToByte = str => parseInt(str, 2)
const lpad = (str, padString, length) => (new Array(length).fill(padString).join('') + str).slice(-length)

module.exports = function entropyToMnemonic(entropy) {
  const entropyBits = Buffer.from(entropy, 'hex').toString('binary').split('').map(x => lpad(x.charCodeAt(0).toString(2), '0', 8)).join('')
  const checksumLength = entropyBits.length / 32
  const hash = require('crypto').createHash('sha256').update(Buffer.from(entropy, 'hex')).digest()
  const hashBits = Array.from(hash).map(b => lpad(b.toString(2), '0', 8)).join('')
  const bits = entropyBits + hashBits.slice(0, checksumLength)

  const chunks = bits.match(/(.{1,11})/g)
  return chunks.map(binaryToByte).map(i => wordlist[i]).join(' ')
}
},{"./wordlists/english.json":7,"crypto":8}],3:[function(require,module,exports){
'use strict'
const crypto = require('crypto')
const entropyToMnemonic = require('./entropyToMnemonic')

module.exports = function generateMnemonic(strength = 128) {
  const entropy = crypto.randomBytes(strength / 8).toString('hex')
  return entropyToMnemonic(entropy)
}
},{"./entropyToMnemonic":2,"crypto":8}],4:[function(require,module,exports){
'use strict'
const wordlist = require('./wordlists/english.json')
const lpad = (str, padString, length) => (new Array(length).fill(padString).join('') + str).slice(-length)

module.exports = function mnemonicToEntropy(mnemonic) {
  const words = mnemonic.split(' ')
  const bits = words.map(w => lpad(wordlist.indexOf(w).toString(2), '0', 11)).join('')
  const dividerIndex = Math.floor(bits.length / 33) * 32
  const entropyBits = bits.slice(0, dividerIndex)
  const entropy = entropyBits.match(/(.{1,8})/g).map(bin => parseInt(bin, 2).toString(16).padStart(2, '0')).join('')
  return entropy
}
},{"./wordlists/english.json":7}],5:[function(require,module,exports){
'use strict'
const pbkdf2 = require('pbkdf2')

module.exports = function mnemonicToSeed(mnemonic, password = '') {
  const salt = 'mnemonic' + password
  return pbkdf2.pbkdf2Sync(mnemonic.normalize('NFKD'), salt.normalize('NFKD'), 2048, 64, 'sha512')
}
},{"pbkdf2":9}],6:[function(require,module,exports){
'use strict'
const wordlist = require('./wordlists/english.json')

module.exports = function validateMnemonic(mnemonic) {
  return mnemonic.split(' ').every(word => wordlist.includes(word))
}
},{"./wordlists/english.json":7}],7:[function(require,module,exports){
module.exports=["abandon","ability","able","about", ... // (קיצרתי, תמשיך מה-JSON האמיתי בגיטהאב אם צריך)
]},8:[function(require,module,exports){
exports.createHash = require('create-hash')
},{"create-hash":10}],9:[function(require,module,exports){
module.exports = require('pbkdf2')
},{"pbkdf2":11}],10:[function(require,module,exports){
// create-hash implementation...
},{}],11:[function(require,module,exports){
// pbkdf2 implementation...
},{}]},{},[1])(1)

